user             nginx;
worker_processes auto;

error_log /var/log/nginx/error.log warn;
pid       /var/run/nginx.pid;


events {
    worker_connections 2048;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile    on;
    tcp_nopush  on;

    client_body_buffer_size     128k;
    client_max_body_size        1m;
    client_header_buffer_size   1k;
    large_client_header_buffers 4 4k;
    output_buffers              1 32k;
    postpone_output             1460;

    client_header_timeout 20s;
    client_body_timeout   20s;
    send_timeout          20s;

    keepalive_timeout 60;

    gzip            on;
    gzip_comp_level 6;
    gzip_proxied    any;
    gzip_min_length 1024;
    gzip_vary       on;
    gzip_types
        application/atom+xml
        application/javascript
        application/json
        application/rss+xml
        application/vnd.ms-fontobject
        application/x-font-ttf
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        font/opentype
        image/svg+xml
        image/x-icon
        text/css
        text/plain
        text/x-component;

    server_tokens off;

    map $http_x_forwarded_proto $proxy_x_forwarded_proto {
        default $http_x_forwarded_proto;
        ''      $scheme;
    }

    map $http_upgrade $proxy_connection {
        default upgrade;
        ''      close;
    }

    upstream decapod_api_cluster {
        server api:8000;
    }

    upstream decapod_clusterdata_cluster {
        server admin:8000;
    }

    # ENABLE FOLLOWING IF HSTS
    # server {
    #     listen 80 default_server;
    #     listen [::]:80 default_server;
    #
    #     return 301 https://$host$request_uri;
    # }
    # / ENABLE FOLLOWING IF HSTS

    server {
        # DISABLE FOLLOWING IF HSTS
        listen 80       default_server;
        listen [::]:80  default_server;
        # / DISABLE FOLLOWING IF HSTS
        listen 443      ssl http2;
        listen [::]:443 ssl http2;

        ssl_certificate           /ssl/ssl.crt;
        ssl_certificate_key       /ssl/ssl.key;
        ssl_dhparam               /ssl/dhparam.pem;
        ssl_session_timeout       1d;
        ssl_session_cache         shared:SSL:10m;
        ssl_session_tickets       off;
        ssl_protocols             TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers
        'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';
        ssl_prefer_server_ciphers on;
        ssl_ecdh_curve            secp384r1;
        # ENABLE IF NOT SELF SIGNED CERTIFICATE
        # ssl_stapling              on;
        # ssl_stapling_verify       on;
        # / ENABLE IF NOT SELF SIGNED CERTIFICATE

        resolver         8.8.8.8 8.8.4.4 valid=300s;
        resolver_timeout 5s;

        # ENABLE IF HSTS
        # add_header Strict-Transport-Security max-age=15768000;
        # /ENABLE IF HSTS

        charset utf-8;

        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; img-src 'self' data:; style-src 'self' 'unsafe-inline';" always;
        add_header X-Frame-Options         SAMEORIGIN      always;
        add_header X-XSS-Protection        "1; mode=block" always;
        add_header X-Content-Type-Options  nosniff         always;

        location / {
            tcp_nodelay on;

            expires 2h;

            root        /static;
            try_files   $uri /index.html;
        }

        location /v1 {
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin'  '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS,PUT,DELETE' always;
                add_header 'Access-Control-Allow-Headers' 'Access-Control-Request-Method,Access-Control-Request-Headers,Access-Control-Allow-Origin,DNT,Authorization,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type' always;
                add_header 'Access-Control-Max-Age'       1728000 always;
                add_header 'Content-Type'                 'text/plain charset=UTF-8' always;
                add_header 'Content-Length'               0 always;
                return 204;
            }
            if ($request_method = 'POST') {
                add_header 'Access-Control-Allow-Origin'  '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS,PUT,DELETE' always;
                add_header 'Access-Control-Allow-Headers' 'Access-Control-Request-Method,Access-Control-Request-Headers,Access-Control-Allow-Origin,DNT,Authorization,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type' always;
            }
            if ($request_method = 'GET') {
                add_header 'Access-Control-Allow-Origin'  '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS,PUT,DELETE' always;
                add_header 'Access-Control-Allow-Headers' 'Access-Control-Request-Method,Access-Control-Request-Headers,Access-Control-Allow-Origin,DNT,Authorization,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type' always;
            }
            if ($request_method = 'PUT') {
                add_header 'Access-Control-Allow-Origin'  '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS,PUT,DELETE' always;
                add_header 'Access-Control-Allow-Headers' 'Access-Control-Request-Method,Access-Control-Request-Headers,Access-Control-Allow-Origin,DNT,Authorization,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type' always;
            }
            if ($request_method = 'DELETE') {
                add_header 'Access-Control-Allow-Origin'  '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS,PUT,DELETE' always;
                add_header 'Access-Control-Allow-Headers' 'Access-Control-Request-Method,Access-Control-Request-Headers,Access-Control-Allow-Origin,DNT,Authorization,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type' always;
            }

            include    uwsgi_params;
            uwsgi_pass decapod_api_cluster;

            proxy_http_version 1.1;
            proxy_buffering    off;
            proxy_set_header   Connection        $proxy_connection;
            proxy_set_header   Host              $http_host;
            proxy_set_header   Proxy             "";
            proxy_set_header   Upgrade           $http_upgrade;
            proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host  $server_name;
            proxy_set_header   X-Forwarded-Proto $proxy_x_forwarded_proto;
            proxy_set_header   X-Real-IP         $remote_addr;
        }

        location /clusterdata {
            expires 1m;

            proxy_pass      http://decapod_clusterdata_cluster/;
            proxy_buffering on;
            proxy_redirect  $scheme://$host:$server_port/ /clusterdata/;
        }
    }
}
