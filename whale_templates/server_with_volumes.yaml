heat_template_version: 2013-05-23

parameters:
  instance_type:
    type: string
    label: Instance Type
    description: Type of flavor to use
    constraints:
      - allowed_values:
        - m1.small
        - m1.medium
        - m1.large
  image_id:
    type: string
    label: Image
    description: Image ID to use for VMs (should be Ubuntu Xenial)
  volume_type:
    type: string
    label: Type of volume
    description: Type of volumes to create and attach to VMs.
  volume_size:
    type: number
    label: Volume Size
    description: Size of volume in GBs
    default: 5
    constraints:
      - range: {min: 1, max: 1024}
  network:
    type: string
    label: Network to use
    description: Network to use for instances
  floating_network:
    type: string
    label: Floating IP network
    description: The name of the network which will be used for pooling.

resources:
  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: {get_param: floating_network}
  floating_ip_association:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: {get_resource: floating_ip}
      port_id: {get_attr: [ceph_host, addresses, {get_param: network}, 0, port]}
  ceph_host:
    type: OS::Nova::Server
    properties:
      flavor: {get_param: instance_type}
      networks:
        - network: {get_param: network}
      block_device_mapping:
        - device_name: vda
          volume_id: {get_resource: volume_vda}
          delete_on_termination: true
        - device_name: vdb
          volume_id: {get_resource: volume_vdb}
          delete_on_termination: true
        - device_name: vdc
          volume_id: {get_resource: volume_vdc}
          delete_on_termination: true
        - device_name: vdd
          volume_id: {get_resource: volume_vdd}
          delete_on_termination: true
        - device_name: vde
          volume_id: {get_resource: volume_vde}
          delete_on_termination: true
        - device_name: vdf
          volume_id: {get_resource: volume_vdf}
          delete_on_termination: true
        - device_name: vdg
          volume_id: {get_resource: volume_vdg}
          delete_on_termination: true
        - device_name: vdh
          volume_id: {get_resource: volume_vdh}
          delete_on_termination: true
        - device_name: vdi
          volume_id: {get_resource: volume_vdi}
          delete_on_termination: true
        - device_name: vdj
          volume_id: {get_resource: volume_vdj}
          delete_on_termination: true
        - device_name: vdk
          volume_id: {get_resource: volume_vdk}
          delete_on_termination: true
      user_data: {get_file: 'user-data.txt'}
      user_data_format: RAW
  volume_vda:
    type: OS::Cinder::Volume
    properties:
      size: 15
      image: {get_param: image_id}
      volume_type: {get_param: volume_type}
  volume_vdb:
    type: OS::Cinder::Volume
    properties:
      size: {get_param: volume_size}
      volume_type: {get_param: volume_type}
  volume_vdc:
    type: OS::Cinder::Volume
    properties:
      size: {get_param: volume_size}
      volume_type: {get_param: volume_type}
  volume_vdd:
    type: OS::Cinder::Volume
    properties:
      size: {get_param: volume_size}
      volume_type: {get_param: volume_type}
  volume_vde:
    type: OS::Cinder::Volume
    properties:
      size: {get_param: volume_size}
      volume_type: {get_param: volume_type}
  volume_vdf:
    type: OS::Cinder::Volume
    properties:
      size: {get_param: volume_size}
      volume_type: {get_param: volume_type}
  volume_vdg:
    type: OS::Cinder::Volume
    properties:
      size: {get_param: volume_size}
      volume_type: {get_param: volume_type}
  volume_vdh:
    type: OS::Cinder::Volume
    properties:
      size: {get_param: volume_size}
      volume_type: {get_param: volume_type}
  volume_vdi:
    type: OS::Cinder::Volume
    properties:
      size: {get_param: volume_size}
      volume_type: {get_param: volume_type}
  volume_vdj:
    type: OS::Cinder::Volume
    properties:
      size: {get_param: volume_size}
      volume_type: {get_param: volume_type}
  volume_vdk:
    type: OS::Cinder::Volume
    properties:
      size: {get_param: volume_size}
      volume_type: {get_param: volume_type}

outputs:
  host_ip:
    description: Floating IP of the host
    value: {get_attr: [floating_ip, floating_ip_address]}
